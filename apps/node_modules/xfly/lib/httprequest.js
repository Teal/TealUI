var Http = require('http'),	Path = require('path'),	Url = require('url'),	HttpUtility = require('./httputility'),	HttpCookie = require('./httpcookie'),	HttpCookieCollection = require('./httpcookiecollection');/** * 使服务器能够读取客户端在 Web 请求期间发送的 HTTP 值。 * @class */function HttpRequest(httpWorkerRequest, context){	this._wr = httpWorkerRequest;	this.context = context;}HttpRequest.prototype = {		/**	 * 当前对象关联的 {@link HttpWorkerRequest} 对象。	 * @type HttpWorkerRequest	 * @private	 */	_wr: null,		/**	 * 获取当前对象关联的 {@link HttpContext} 对象。	 * @type HttpContext	 */	context: null,		/**	 * 获取客户端支持的 MIME 接受类型的字符串数组。	 * @return {String[]} 客户端支持的 MIME 接受类型的字符串数组。	 * @remark 此属性将消费大量性能，应该保存属性返回值以重复使用资源。	 */	get acceptTypes(){		return parseMultivalueHeader(this.getHeader('Accept'));	},		/**	 * 获取客户端支持的字符集的字符串数组。	 * @return {String[]} 客户端支持的字符集的字符串数组。	 * @remark 此属性将消费大量性能，应该保存属性返回值以重复使用资源。	 */	get acceptCharsets(){		return parseMultivalueHeader(this.getHeader('Accept-Charsets'));	},		// AnonymousID		/**	 * 获取服务器上虚拟应用程序根路径。(末尾不含 /)	 * @return {String} 当前应用程序的虚拟路径。	 */	get applicationPath(){		return this._wr.getAppPath();	},		// /**	 // * 获取应用程序根的虚拟路径，并通过对应用程序根使用波形符 (~) 表示法（例如，以“~/page.aspx”的形式）使该路径成为相对路径。	 // * @return {String} 当前请求的应用程序根的虚拟路径。	 // */	// get appRelativeCurrentExecutionFilePath(){		// return '~' + this.currentExecutionFilePath.replace(this._wr.getAppPath(), "");	// },		/**	 * 获取当前请求的客户端安全证书。	 * @return {HttpClientCertificate} 包含有关客户端安全证书设置的信息的对象。	 */	get clientCertificate(){		return this._wr.getClientCertificate();	},		/**	 * 获取或设置实体主体的字符集。	 * @return {String} 表示客户端的字符集的编码。	 */	get contentEncoding(){		if(this._contentEncoding)			return this._contentEncoding;			var userAgent = this.userAgent;		if(/^UP/i.test(userAgent)){			var encoding = this.getHeader("x-up-devcap-post-charset");			if(encoding)				return this._contentEncoding = encoding;		}				if(!this._wr.hasEntityBody()){			return null;		}        		var contentType = this.contentType;				if(!contentType){			return null;		}				var attributeFromHeader = HttpUtility.getAttributeFromHeader(contentType, "charset");		if (attributeFromHeader == null) {			return null;		}			return this._contentEncoding = attributeFromHeader;	},		/**	 * 获取或设置实体主体的字符集。	 * @param {String} value 表示客户端的字符集的编码。	 */	set contentEncoding(value){		this._contentEncoding = value;		this._wr.contentEncoding = value;	},		/**	 * 指定客户端发送的内容长度（以字节计）。	 * @return {Number} 客户端发送的内容的长度（以字节为单位）。	 */	get contentLength(){		return this._wr.getTotalEntityBodyLength();	},		/**	 * 获取或设置传入请求的 MIME 内容类型。	 * @return {String} 表示传入请求的 MIME 内容类型的字符串，例如，“text/html”。	 */	get contentType(){		return this.getHeader('Content-Type');	},		/**	 * 获取或设置传入请求的 MIME 内容类型。	 * @return {String} 表示传入请求的 MIME 内容类型的字符串，例如，“text/html”。	 */	set contentType(value){		this.setHeader('Content-Type', value);	},		/**	 * 获取响应 Cookie 集合。	 * @return {HttpCookieCollection} 响应 Cookie 集合。	 */	get cookies(){		return this._cookies || (this._cookies = HttpCookieCollection.parse(this.getHeader("Cookie")));	},		/**	 * 获取一个 Cookie 字段。	 */	getCookie: function(name){		var cookie = this.cookies[name];		return cookie ? cookie.toString() : undefined;	},		// /**	 // * 获取当前请求的虚拟路径。	 // * @return {String} 当前请求的虚拟路径。	 // */	// get currentExecutionFilePath(){		// return this._wr.getFilePath();	// },		// /**	 // *获取当前请求的虚拟路径的扩展名。	 // @return {String} 当前请求的虚拟路径的扩展名。	 // */	// get currentExecutionFilePathExtension(){		// return Path.extname(this.currentExecutionFilePath);	// },		/**	 *获取当前请求的虚拟路径的扩展名。	 @return {String} 当前请求的虚拟路径的扩展名。	 */	get filePathExtension(){		return Path.extname(this._wr.getFilePath());	},		/**	 * 获取当前请求的虚拟路径。	 * @return {String} 当前请求的虚拟路径。	 */	get filePath(){		return this._wr.getFilePath();	},	/**	 * 获取采用多部分 MIME 格式的由客户端上载的文件的集合。	 * @return {Object} 客户端上载的文件集合。	 */	get files(){			},		// Filter		/**	 * 获取窗体变量集合。	 * @return {Object} 表示窗体变量集合的 Object。	 */	get form(){				if(!this.hasForm)			return null;				if(this._form)			return this._form;				return this._form = HttpUtility.parseQueryString(this.content.toString(this.contentEncoding || "utf-8"));			},		/**	 * 获取一个字符串，该值指示 Files 是否存在。	 * @return {Boolean} 表示窗体变量集合的 Object。	 */	get hasFiles(){		return this._wr.hasEntityBody() && /^multipart\/form-data/i.test(this.contentType);	},		/**	 * 获取一个字符串，该值指示 Form 是否存在。	 * @return {Boolean} 表示窗体变量集合的 Object。	 */	get hasForm(){		return this._wr.hasEntityBody() && /^application\/x-www-form-urlencoded/i.test(this.contentType);	},		/**	 * 获取一个字符串，该值指示 Form 是否存在。	 * @return {Boolean} 表示窗体变量集合的 Object。	 */	get hasQueryString(){		return !!this._wr.getQueryString();	},		/**	 * 获取 HTTP 头集合。	 * @return {Object} 表示窗体变量集合的 Object。	 */	get headers(){		return this._wr.getAllRequestHeaders();	},		/**	 * 返回指定字段的 HTTP 请求标头。	 * @param {String} name 标头的名称。	 * @return {String} HTTP 请求标头。	 */	getHeader: function(name){		return this._wr.getRequestHeader(name);	},		/**	 * 获取客户端使用的 HTTP 数据传输方法（如 GET、POST 或 HEAD）。	 * @return {String} 客户端使用的 HTTP 数据传输方法。	 */	get httpMethod(){		return this._wr.getHttpVerbName();	},		/**	 * 获取客户端使用的 HTTP 版本(如 HTTP/1.1)。	 * @return {String} 客户端使用的 HTTP 版本。	 */	get httpVersion(){		return this._wr.getHttpVersion();	},		/**	 * 获取或设置从缓存中移除缓存信息的绝对日期和时间。	 * @return {Date} 该页过期时的日期和时间。	 */	get ifModifiedSince(){		return HttpUtility.getDateFromHeader(this.getHeader("If-Modified-Since"));	},		/**	 * 获取或设置从缓存中移除缓存信息的绝对日期和时间。	 * @return {Date} 该页过期时的日期和时间。	 */	set ifModifiedSince(value){		this.setHeader("If-Modified-Since", value.toUTCString());	},		/**	 * 获取引发当前请求的原因。	 * @return {Number} 请求的原因码。 0 - 浏览器访问, 1 - XMLHttpRequest	 */	get reason(){		return this._wr.getRequestReason();	},		// /**	 // * 获取或设置一个值，该对象表示当前标头输出流的编码。	 // * @return {String} 一个编码，包含与当前标头的字符集有关的信息。	 // */	// get headerEncoding(){		// return this._wr.headerEncoding;	// },		// /**	 // * 获取或设置一个值，该对象表示当前标头输出流的编码。	 // * @return {String} 一个编码，包含与当前标头的字符集有关的信息。	 // */	// set headerEncoding(value){		// this._wr.headerEncoding = value;	// },		// Output		/**	 * 获取传入的 HTTP 实体主体的内容。	 * @return {Stream} 请求正文。	 */	get inputStream(){		return this._wr.inputStream;	},		// IsAuthenticated		/**	 * 获取一个值，该值指示该请求是否来自本地计算机。	 * @return {Boolean} 如果该请求来自本地计算机，则为 true；否则，为 false。	 */	get isLocal(){		var userHostAddress = this.userHostAddress;		if (!userHostAddress) {			return false;		}		return userHostAddress == "127.0.0.1" || userHostAddress == "::1" || userHostAddress == this._wr.getLocalAddress();	},		/**	 * 获取一个值，该值指示 HTTP 连接是否使用安全套接字（即 HTTPS）。	 * @return {Boolean} 如果连接是 SSL 连接，则为 true；否则为 false。	 */	get isSecureConnection(){		return this._wr.isSecure();	},		/**	 * 获取 QueryString Form ServerVariables 和 Cookies 项的组合集合。	 * @return 一个 Object 对象。	 */	get params(){		var obj = {};		copy(obj, this.serverVariables);		copy(obj, this.form);		copy(obj, this.queryString);				function copy(dest, src){			for(var key in src){				dest[key] = src[key];			}		}	},		/**	 * 获取当前请求的虚拟路径。	 * @return {Url} 当前请求的虚拟路径。	 */	get path(){		return this._wr.getUriPath();	},		/**	 * 获取具有 URL 扩展名的资源的附加路径信息。	 * @return {String} 资源的附加路径信息。	 */	get pathInfo(){		return this._wr.getPathInfo();	},		/**	 * 获取当前正在执行的服务器应用程序的根目录的物理文件系统路径。	 * @return {String} 当前应用程序的根目录的文件系统路径。	 */	get physicalApplicationPath(){		return this._wr.getAppPathTranslated();	},		/**	 * 获取与请求的 URL 相对应的物理文件系统路径。	 * @return {String} 当前请求的文件系统路径。	 */	get physicalPath(){		return this._wr.getFilePathTranslated();	},		/**	 * 获取 HTTP 查询字符串变量集合。	 * @return {Object} 包含由客户端发送的查询字符串变量的集合。	 */	get queryString(){		return this._queryString || (this._queryString = HttpUtility.parseQueryString(this.queryStringText));	},		/**	 * 获取 HTTP 查询字符串变量源字符串 。	 * @return {String} 包含由客户端发送的查询字符串变量的集合。	 */	get queryStringText(){		return this._wr.getQueryString();	},		/**	 * 获取当前请求的原始 URL。	 * @return {String} 当前请求的原始 URL。	 */	get rawUrl(){		return this._wr.getRawUrl();	},		/**	 * 获取 Web 服务器变量的集合。	 */	get serverVariables(){		return {};	},		/**	 * 获取当前输入流中的字节数。	 * @param {Number} 输入流中的字节数。	 */	get totalBytes(){		return this._wr.getBytesRead();	},		/**	 * 获取有关当前请求的 URL 的信息。	 * @param {Number} 包含有关当前请求的 URL 的信息的对象。	 */	get url(){		return Url.parse(this.rawUrl, true);	},		/**	 * 获取有关当前请求的 HOST 的信息。	 * @return {String} 包含有关当前请求的 HOST 的信息。	 */	get host(){		return this.getHeader("Host") || (this.localHostAddress + (this.localHostPort !== 80 ? ":" + this.localHostPort == 80 : ""));	},		/**	 * 获取指向当前请求地址的链接地址。	 * @return {String} 链接地址。	 */	get href(){		return (this._wr.isSecure() ? "https://" : "http://") + this.host + this.rawUrl;	},		/**	 * 获取当前请求的正文。	 * @return {Buffer} 请求的正文。	 */	get content(){		return this._wr.getEntityBody();	},		/**	 * 获取有关客户端上次请求的 URL 的信息，该请求链接到当前的 URL。	 * @return {String} 包含有关当前请求的 URL 的信息的对象。	 */	get urlReferrer(){		return this.getHeader('Referer');	},		/**	 * 获取客户端浏览器的原始用户代理信息。	 * @return {String} 客户端浏览器的原始用户代理信息。	 */	get userAgent(){		return this.getHeader('User-Agent');	},		/**	 *获取本地客户端的 IP 主机地址。	 * @return {String} 本地客户端的 IP 地址。	 */	get localHostAddress(){		return this._wr.getLocalAddress();	},		/**	 * 获取本地客户端的端口。	 * @return {String} 本地客户端的端口。	 */	get localHostPort(){		return this._wr.getLocalPort();	},		/**	 * 获取远程客户端的显示 IP 主机地址。	 * @return {String} 远程客户端的 IP 地址。	 * @remark 该函数会检测 HTTP 头的代理字段，并优先返回 HTTP 头中的 IP 字段。	 */	get ip(){		return this.getHeader("X-Forwarded-For") || 			this.getHeader("Via") || 			this.userHostAddress;	},		/**	 * 获取远程客户端的 IP 主机地址。	 * @return 远程客户端的 IP 地址。	 */	get userHostAddress(){		return this._wr.getRemoteAddress();	},		/**	 * 获取远程客户端的端口。	 * @param {Number} 远程客户端的端口。	 */	get userHostPort(){		return this._wr.getRemotePort();	},		/**	 * 获取远程客户端的 DNS 名称。	 * @param {Number} 远程客户端的 DNS 名称。	 */	get userHostName(){		return this._wr.getRemoteName();	},		/**	 * 获取客户端语言首选项的排序字符串数组。	 * @param String[]} 经过排序的客户端语言首选项的字符串数组，或者，如果为空，则为 null。	 * @remark 此属性将消费大量性能，应该保存属性返回值以重复使用资源。	 */	get userLanguages(){		return parseMultivalueHeader(this.getHeader('Accept-Language'));	},		/**	 * 将传入图像字段窗体参数映射为适当的 x 坐标值和 y 坐标值。	 * @param {String} imageFieldName 窗体图像映射的名称。	 * @return {[Number, Number]} 二维整数数组。	 */	mapImageCoordinates: function(imageFieldName){		var obj;		switch (this.httpMethod) {                case "GET":                case "HEAD":                    obj = this.queryString;                    break;                case "POST":                    obj = this.form;                    break;                default:                    return null;            }		return [+obj[imageFieldName + ".x"], +obj[imageFieldName + ".y"]];	},		/**	 * 将指定的虚拟路径映射到物理路径。	 * @param {String} virtualPath 当前请求的虚拟路径（绝对路径或相对路径）。	 * @param {String} baseVirtualDir 用于相对解析的虚拟基目录路径。	 * @param {Boolean}  allowCrossAppMapping允许属于另一个应用程序。	 * @return 服务器物理路径。	 */	mapPath: function(virtualPath, baseVirtualDir, allowCrossAppMapping){		if(baseVirtualDir) {			virtualPath = virtualPath.replace(baseVirtualDir, "");		}				virtualPath = this._wr.mapPath(virtualPath);				if(allowCrossAppMapping === false && this._wr.getAppPathTranslated().indexOf(virtualPath) !== 0) {			throw new Error('Cross app mapping');		}				return virtualPath;	},		/**	 * 将 HTTP 请求保存到磁盘。	 * @param {String} filename 物理驱动器路径。	 * @param {Boolean} includeHeaders 一个布尔值，该值指定是否应将 HTTP 头保存到磁盘。	 */	saveAs: function(filename, includeHeaders){				var FS = require('fs');			var s = FS.createWriteStream(filename, {			flags: 'w',			encoding: null,			mode: 0666		});				if(includeHeaders !== false){			var header = this.httpVersion + ' ' + this.httpMethod + ' ' + this.rawUrl + '\r\n';			var headers = this.headers;			for(var key in headers){				header += key + ': ' + headers[key] + '\r\n';			}						header += '\r\n';			s.write(header);		}				if(this._wr.hasEntityBody()){			s.write(this._wr.getEntityBody());		}				s.end();	},		/**	 * 对集合进行验证。	 */	validateInput: function(){			validate(this.cookies);		validate(this.form);		validate(this.queryString);				function validate(collection){			for(var key in collection){				if(check(collection[key]) === false) {					throw new Error('ValidateInput Error: `' + collection[key] + '` is not allowed');				}			}		}				function check(value){			return /<\w+>/.test(value);		}	}	};function parseMultivalueHeader(s) {	if (!s) {		return null;	}	var list = [];	var startIndex = 0;	var num = s.length;	while (startIndex < num) {		var index = s.indexOf(',', startIndex);		if (index < 0) {			index = num;		}		list.push(s.substr(startIndex, index - startIndex));		startIndex = index + 1;		if ((startIndex < num) && (s.charAt(startIndex) == ' ')) {			startIndex++;		}	}	return list;}module.exports = HttpRequest;