var Http = require('http'),	Path = require('path');/** * 此抽象类定义由服务器用于处理请求的基本辅助方法和枚举。 * @class * @remark  * 此类是和底层的 nodejs 直接进行交互的内部类。 * 修改或继承此类，可以方便地将 XFly 服务器模型移植到其它坏境中。 */function HttpWorkerRequset(){}HttpWorkerRequset.prototype = {		/**	 * 终止与客户端的连接。	 */	closeConnection: function(){		},		/**	 *  由运行库使用以通知 *HttpWorkerRequest* 当前请求的请求处理已完成。	 */	endOfRequest: function(){		},		/**	 * 将所有挂起的响应数据发送到客户端。	 * @param {Boolean} finalFlush 如果这将是最后一次刷新响应数据，则为 true；否则为 false。	 */	flushResponse: function(finalFlush){		},		/**	 * 返回当前正在执行的服务器应用程序的虚拟路径。	 * @return {String} 当前应用程序的虚拟路径。	 */	getAppPath: function(){		return "/";	},		/**	 * 返回当前正在执行的服务器应用程序的物理路径。	 * @return {String} 当前应用程序的物理路径。	 */	getAppPathTranslated: function(){		return "/";	},		/**	 * 在派生类中被重写时，返回当前 URL 的应用程序池 ID。	 * @return {String} 返回应用程序池 ID。	 */	getAppPoolID: function(){		return null;	},		/**	 * 获取从客户端读入的字节数。	 * @return {Number} 客户端读入的字节数。	 */	getBytesRead: function(){		return null;	},		/**	 * 在派生类中被重写时，从客户端发出的请求获取证书字段（以 X.509 标准指定）。	 * @return {Buffer} 包含整个证书内容流的字节数组。	 */	getClientCertificate: function(){		return null;	},		/**	 * 获取证书颁发者（以二进制格式表示）。	 * @return {Buffer} 包含以二进制格式表示的证书颁发者的字节数组。	 */	getClientCertificateBinaryIssuer: function(){		return null;	},		/**	 * 在派生类中被重写时，返回用于编码客户端证书的编码。	 * @return {Number} 表示为整数的证书编码。	 */	getClientCertificateEncoding: function(){		return null;	},		/**	 * 在派生类中被重写时，获取与客户端证书关联的 PublicKey 对象。	 * @return {Buffer} 包含整个证书内容流的字节数组。	 */	getClientCertificatePublicKey: function(){		return null;	},		/**	 * 在派生类中被重写时，则获取证书开始生效的日期。此日期随区域设置的不同而不同。	 * @return {Date} 表示证书生效时间的 Date 对象。	 */	getClientCertificateValidFrom: function(){		return null;	},		/**	 * 获取证书到期日期。	 * @return {Date} 表示证书失效日期的 Date 对象。	 */	getClientCertificateValidUntil: function(){		return null;	},		/**	 * 在派生类中被重写时，返回当前连接的 ID。	 * @return {Number} 始终返回 0。	 */	getConnectionID: function(){		return 0;	},		/**	 * 在派生类中被重写时，返回所请求的 URI 的虚拟路径。	 * @return {String} 请求的 URI 的路径。	 */	getFilePath: function(){		return 0;	},		/**	 * 返回请求的 URI 的物理文件路径（并将其从虚拟路径转换成物理路径：例如，从"/proj1/page.aspx"转换成"c:\dir\page.aspx"）。	 * @return {String} 请求的 URI 的已转换的物理文件路径。	 */	getFilePathTranslated: function(){		return 0;	},		/**	 * 返回请求标头的指定成员。	 * @return {String} 请求标头中返回的 HTTP 谓词。	 */	getHttpVerbName: function(){		return 0;	},		/**	 * 提供对请求的 HTTP 版本（如"HTTP/1.1"）的访问。	 * @return {String} 请求标头中返回的 HTTP 版本。	 */	getHttpVersion: function(){		return 0;	},		/**	 * 返回与指定的索引相对应的标准 HTTP 请求标头。	 * @return {String} 标头的索引。	 */	getHeader: function(){		return 0;	},		/**	 * 请求标头中返回的服务器 IP 地址。	 * @return {String} 请求标头中返回的服务器 IP 地址。	 */	getLocalAddress: function(){			},		/**	 * 请求标头中返回的服务器端口号。	 * @return {String} 请求标头中返回的服务器端口号。	 */	getLocalPort: function(){			},		/**	 * 在派生类中被重写时，返回 HTTP 协议（HTTP 或 HTTPS）。	 * @return {String} 如果使用了 SSL ，是HTTPS；否则，为 HTTP。	 */	getProtocol: function(){			},		/**	 * 返回请求 URL 中指定的查询字符串。	 * @return {String} 请求查询字符串。	 */	getQueryString: function(){			},		/**	 * 返回附加了查询字符串的请求标头中包含的 URL 路径。	 * @return {String} 请求标头的原始 URL 路径。	 */	getRawUrl: function(){			},		/**	 * 提供对请求标头的指定成员的访问。	 * @return {String} 客户端的 IP 地址。	 */	getRemoteAddress: function(){			},		/**	 * 在派生类中被重写时，返回客户端计算机的名称。	 * @return {String} 客户端计算机的名称。	 */	getRemoteName: function(){			},		/**	 * 提供对请求标头的指定成员的访问。	 * @return {Number} 客户端的 HTTP 端口号。	 */	getRemotePort: function(){			},		/**	 * 在派生类中被重写时，返回请求的原因。	 * @return {Number} 原因代码。	 */	getRequestReason: function(){			},		/**	 * 在派生类中被重写时，返回本地服务器的名称。	 * @return {Number} 本地服务器的名称。	 */	getServerName: function(){			},		/**	 * 从与请求关联的服务器变量词典返回单个服务器变量。	 * @param {String} name 请求的服务器变量的名称。	 * @return {Number} 请求的服务器变量。	 */	getServerVariable: function(name){			},		/**	 * 返回请求的 URI 的虚拟路径。	 * @return {String} 请求的 URI 的路径。	 */	getUriPath: function(){			},		/**	 * 返回一个值，该值指示是否已为当前的请求将 HTTP 响应标头发送到客户端。	 * @return {Boolean} 如果 HTTP 响应标头已发送到客户端，则为 true；否则，为 false。	 */	headersSent: function(){			},		/**	 * 返回一个值，该值指示客户端连接是否仍处于活动状态。	 * @return {Boolean} 如果客户端连接仍处于活动状态，则为 true；否则，为 false。	 */	isClientConnected: function(){			},		/**	 * 返回一个指示连接是否使用 SSL 的值。	 * @return {Boolean} 如果连接是 SSL 连接，则为 true；否则为 false。默认值为 false。	 */	isSecure: function(){			},		/**	 * 返回与指定虚拟路径相对应的物理路径。	 * @param {String} virtualPath 虚拟路径。	 * @return {String} 参数中指定的虚拟路径相对应的物理路径。	 */	mapPath: function(virtualPath){			},		/**	 * 将 Content-Length HTTP 标头添加到小于或等于 2 GB 的消息正文的响应。	 * @param {Number} contentLength 响应的长度（以字节为单位）。	 */	sendCalculatedContentLength: function(contentLength){			},		/**	 * 将 Content-Length HTTP 标头添加到小于或等于 2 GB 的消息正文的响应。	 * @param {String} filename 要写入 HTTP 输出的文件名。	 * @param {Number} offset=0 文件中的位置，将从该位置开始将内容写入到 HTTP 输出中。	 * @param {Number} length=buffer.length 要传输的字节数。	 */	sendResponseFromFile: function(filename, offset, length){			},		/**	 * 将字节数组中指定数目的字节添加到响应。	 * @param {String} data 要发送的字节数组。	 * @param {Number} length=data.length 要发送的字节数（从第一个字节开始）。	 */	sendResponseFromMemory: function(data, length){			},		/**	 * 指定响应的 HTTP 状态代码和状态说明，例如 SendStatus(200, "Ok")。	 * @param {Number} statusCode 要发送的状态代码。	 * @param {String} statusDescription 要发送的状态说明。	 */	sendStatus: function(statusCode, statusDescription){			},		/**	 * 将指定的 *HttpCookieCollection* 输出到 HTTP 响应。	 * @param {HttpCookieCollection} cookies 要发送的状态代码。	 */	sendCookies: function(cookies){			},		/**	 * 在发送所有响应数据后注册可选通知。	 * @param {Function} callback 在发送所有数据（带外）后调用的通知回调。	 * @param {Object} extraData 回调的附加参数。	 */	setEndOfSendNotification: function(callback, extraData){			},		/**	 * 获取或设置一个编码，该对象表示当前标头输出流的编码。	 */ 	get headerEncoding(){		},		/**	 * 获取或设置一个编码，该对象表示当前标头输出流的编码。	 */ 	set headerEncoding(value){			},		/**	 * 获取 Machine.config 文件的完整物理路径。	 */	get machineConfigPath(){			},		/**	 * 获取网站服务器文件的安装目录的物理路径。	 * @return 网站服务器文件的安装目录的物理路径。	 */	get machineInstallDirectory(){			},		/**	 * 获取根 Web.config 文件的完整物理路径。	 * @return 根 Web.config 文件的物理路径。	 */	get rootWebConfigPath(){			}	};/** * 返回一个字符串，该字符串描述指定的 HTTP 状态代码的名称。 * @param {Number} code HTTP 状态代码。 * @return 状态说明。 */HttpWorkerRequset.getStatusDescription = function(statusCode){	return Http.STATUS_CODES[statusCode]  || 'Unknown';};module.exports = HttpWorkerRequset;