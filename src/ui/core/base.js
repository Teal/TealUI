/**
 * @author xuld
 */

include("core/class.js");

/**
 * ï¿½ï¿½ï¿½ï¿½ UI ï¿½ï¿½ï¿½ï¿½ï¿½Ä»ï¿½ï¿½à¡£
 * @class Control
 * @abstract
 * ï¿½Ø¼ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú£ï¿½
 * constructor - ï¿½ï¿½ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½ Javascript ï¿½à¡£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ìº¯ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Öªï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê²Ã´ï¿½ï¿½
 * create - ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ dom ï¿½Úµã¡£Ä¬ï¿½ï¿½Îªï¿½ï¿½ï¿½ï¿½ #tpl ï¿½ï¿½Ó¦ï¿½ï¿½ HTML ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ó¦Ô­ï¿½ï¿½ï¿½Úµã¡£
 * init - ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½ï¿½í¡£Ä¬ï¿½ï¿½Îªï¿½Õºï¿½ï¿½ï¿½ï¿½ï¿½
 * attach - ï¿½ï¿½ï¿½Ó¿Ø¼ï¿½ï¿½ï¿½Ó¦ï¿½Ä½Úµãµ½ DOM ï¿½ó¡£²ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½×°ï¿½Ë¶ï¿½ï¿½ï¿½ DOM ï¿½Úµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 * detach - É¾ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½Ó¦ï¿½Ä½Úµã¡£ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ò»ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½×°ï¿½Ë¶ï¿½ï¿½ï¿½ DOM ï¿½Úµï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
 */
var Control = Class({

	/**
	 * ï¿½ï¿½Ç° UI ï¿½ï¿½ï¿½ï¿½ï¿½ó¶¨µï¿½ Dom ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @type {Dom}
	 */
	dom: null,

	/**
	 * xtype: ï¿½ï¿½ï¿½Ú±ï¿½ï¿½Ç¿Ø¼ï¿½ï¿½ï¿½ css ï¿½à¡£
	 * @protected virtual
	 */
	xtype: "x-control",

	/**
	 * ï¿½ï¿½Ç°ï¿½Ø¼ï¿½ï¿½ï¿½ HTML Ä£ï¿½ï¿½ï¿½Ö·ï¿½ï¿½ï¿½ï¿½ï¿½
	 * @getter {String} tpl
	 * @protected virtual
	 */
	tpl: "<div/>",

	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Éµï¿½Ç°ï¿½Ø¼ï¿½ï¿½ï¿½Ó¦ï¿½ï¿½Ô­ï¿½ï¿½ï¿½Úµã¡£
	 * @param {Object} options Ñ¡ï¿½î¡£
     * @return {Element} Ô­ï¿½ï¿½ï¿½ï¿½ DOM ï¿½Úµã¡£
	 * @protected virtual
	 */
	create: function () {

		// ×ªÎªï¿½ï¿½ tplï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
		return Dom.parseNode(this.tpl.replace(/xtype/g, this.xtype));
	},

	/**
	 * ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð´Ê±ï¿½ï¿½ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½Ç°ï¿½Ø¼ï¿½ï¿½ï¿½
	 * @param {Object} options ï¿½ï¿½Ç°ï¿½Ø¼ï¿½ï¿½Ä³ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½ï¿½Ã¡ï¿½
	 * @protected virtual
	 */
	init: Function.empty,

	/**
	 * ï¿½ï¿½Ê¼ï¿½ï¿½Ò»ï¿½ï¿½ï¿½ÂµÄ¿Ø¼ï¿½ï¿½ï¿½
	 * @param {String/Element/Dom/Object} [options] ï¿½ó¶¨µÄ½Úµï¿½ï¿½ï¿½ï¿½Úµï¿½ id ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ú³ï¿½Ê¼ï¿½ï¿½ï¿½ï¿½Ç°ï¿½Ø¼ï¿½ï¿½ï¿½
	 */
	constructor: function (options) {

		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ð¿Ø¼ï¿½ï¿½ï¿½ï¿½ÃµÄ¹ï¿½ï¿½ìº¯ï¿½ï¿½ï¿½ï¿½
		var me = this,

			// ï¿½ï¿½Ê±ï¿½ï¿½ï¿½ï¿½ï¿½Ã¶ï¿½ï¿½ï¿½ï¿½ï¿½
			opt = {},

			// ï¿½ï¿½Ç°Êµï¿½ÊµÄ½Úµã¡£
			node;

		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ã¡ï¿½
		if (options) {

			// ï¿½ï¿½ï¿½ï¿½ options ï¿½Ç´ï¿½ï¿½ï¿½ï¿½Ã¡ï¿½
			if (options.constructor === Object) {

				// ï¿½ï¿½ï¿½ï¿½ï¿½Ã¿ï¿½ï¿½ï¿½ï¿½ï¿½ opt ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½
				Object.extend(opt, options);

				// ï¿½ï¿½ï¿½ï¿½ nodeï¿½ï¿½selectorï¿½ï¿½dom ï¿½Ö¶ï¿½
				if (opt.node) {
					node = opt.node;
					delete opt.node;
				} else if (opt.selector) {
					node = Dom.find(opt.selector);
					delete opt.selector;
				} else if (opt.dom) {
					node = opt.dom;
					delete opt.dom;
				}

				if (node) {
					node = Dom.getNode(node);
				}

			} else {

				// ï¿½ï¿½ï¿½ò£¬³ï¿½ï¿½Ô¸ï¿½ï¿½ï¿½ options ï¿½Òµï¿½ï¿½Úµã¡£
				node = Dom.getNode(options);
			}

		}

		// ï¿½ï¿½ï¿½ï¿½ node ï¿½ï¿½ï¿½Òµï¿½ï¿½ï¿½ï¿½ï¿½Ê¹ï¿½ï¿½ nodeï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ê¹ï¿½ï¿½ #create(opt)ï¿½ï¿½ï¿½É½Úµã¡£
		me.node = node || me.create(opt);

		assert.isNode(me.node, "Dom#constructor(options): Dom ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ {node} ï¿½ï¿½ï¿½Ç½Úµã¡£", me.node);

		// ï¿½ï¿½ï¿½ï¿½ init ï¿½ï¿½Ê¼ï¿½ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½
		me.init(opt);

		// ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½Ä¸ï¿½ï¿½ï¿½Ñ¡ï¿½î¡£
		me.set(opt);
	},

	/**
	 * ï¿½ï¿½ï¿½Ãµï¿½Ç°ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½ï¿½×´Ì¬, ï¿½ï¿½ï¿½Ä±ï¿½ï¿½Ø¼ï¿½ï¿½ï¿½ï¿½ï¿½Ê½ï¿½ï¿½
     * @param {String} name ×´Ì¬ï¿½ï¿½ï¿½ï¿½
     * @param {Boolean} value=false Òªï¿½ï¿½ï¿½Ãµï¿½×´Ì¬Öµï¿½ï¿½
	 * @protected virtual
	 */
	state: function (name, value) {
		this.dom.toggleClass(this.xtype + '-' + name, value);
	}

});
