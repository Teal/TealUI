/** * @author  xuld */using("System.Dom.Base");/** * 一个标签选择器。 */var TagChooser = Class({		seperator: ' ',		prefix: '✚ ',		onTargetChange: function(){		var seperator = this.seperator,			content = seperator + this.target.getText() + seperator;				this.tags.each(function(value){			value = Dom.get(value);			value.toggleClass('x-tagchooser-selected', content.indexOf(seperator + value.getText().substr(2) + seperator) > -1);		});			},		onTagClick: function(tag){		var seperator = this.seperator,			value = this.target.getText(), newValue = tag.getText().substr(this.prefix.length);		if(tag.hasClass('x-tagchooser-selected')) {			value = value.split(seperator);			while(value.remove(newValue) >= 0);			this.target.setText(value.join(seperator));			tag.removeClass('x-tagchooser-selected');		} else if((seperator + value + seperator).indexOf(seperator + newValue + seperator) === -1) {			tag.addClass('x-tagchooser-selected');			this.target.setText(  (value ? value + seperator : value) + newValue);		} else {			tag.addClass('x-tagchooser-selected');		}	},		constructor: function(target, tags, prefix){				var me = this;				me.target = Dom.get(target);		me.tags = Dom.query(tags);				if(prefix !== undefined){			this.prefix = prefix;		}				me.tags.on('click', function(){			me.onTagClick(this);		}).each(function(value){			var node = Dom.get(value);			node.setText(this.prefix + node.getText());			}, me);				me.target.on('keyup', me.onTargetChange, me);				me.onTargetChange();			}});